file = open("original_file.txt", "r").read()
temp_file = file
unique_char = "üòÄ"
# Megkeresni az optim√°lis leggyakoribb, leghosszabb karakterl√°ncokat,
# amiket egyedien elmentek, √©s indexeket, hogy hol fordulnak el≈ë.
# Ha a karakterl√°nc hosszabb  mint az indexe, akkor m√°ris sp√≥roltam

seq_len = 0 # Karakterl√°nc hossz sz√°ml√°l√≥
while True: # Addig keresem az ide√°lis karakterl√°nc hosszt, am√≠g meg nem tal√°lom
    seqs = {} # kulcs a karakterl√°nc, √©rt√©k az el≈ëfordul√°sok sz√°ma a sz√∂vegben
    ii = 0
    while ii <= len(file)-seq_len: # Minden karakteren v√©gigmegyek
        sequence = "" # Ez lesz az aktu√°lis karakterl√°nc
        for j in range(seq_len): # Aktul√°lis karakter √©s az √©ppen soron l√©v≈ë karakterl√°nc hossz mennyi√©s≈± karaktert f≈±z√∂k hozz√°           
            sequence += file[ii+j]
        if sequence not in seqs: # Ha m√©g nem l√°ttam ilyet, let√°rolom            
            ii += seq_len # HA EGY L√ÅNCOT LEMENTETTEM, A K√ñVI KERES√âSE A MENTETT UT√ÅN KEZD≈êDJ√ñN, NE PETID A MENTETT L√ÅNC 2. KARAKTER√âN√âL
            count = temp_file.count(sequence) # H√°nyszor fordul el≈ë a sz√∂vegben            
            if count > 1: # Ha minimum 2x, akkor meg√©ri lecser√©lni majd indexre
                seqs[sequence] = count # Az egyedi karakterl√°ncokat tartlmazza, el≈ëfordul√°si mennyis√©ggel √©rt√©knek                                
                temp_file = temp_file.replace(sequence, unique_char) # Ha ezt a l√°ncot mentettem, t√∂bbet ne forduljon el≈ë
        

        print(f"Sequnce length: {seq_len}, Process: {round(ii/(len(file)-seq_len)*100)}%")#, Appearence count: {sum(seqs.values())*seq_len}")
        
        # A karakterl√°ncok leend≈ë indexe t√∂bb karakter-e mint maga a l√°nc. -> t√∂bb karakter-e le√≠rni sz√°mmal mint eredetileg volt
        if len(str(len(seqs))) >= seq_len:        
            break

        ii += 1
    
    if len(str(len(seqs))) >= seq_len:
        seq_len += 1    # Pr√≥b√°lkozzunk hosszabb karakterl√°ncokkal
        temp_file = file # Vissza√°ll√≠tom a temp fi√°jlt az √∫j l√°ncok keres√©s√©hez
    else:
        print("Best sequnce length found:", seq_len)
        break






seqs = dict(sorted(seqs.items(), key=lambda item: item[1], reverse=False)) #Ennek majd kevert hossz√∫s√°g√∫ karakterl√°ncokn√°l lesz √©rtelme

print("Original: ", len(file))

idx = 0
key_dict = ""
for key, value in seqs.items():
    while True:
        character = chr(idx)
        if character not in file:
            file = file.replace(key, character)            
            key_dict += key+unique_char+character
            break

        idx += 1

print("After", len(file))
print("Kulcsok ment√©se foglal:", len(key_dict))

f = open("compressed.txt", "w")
f.write(key_dict+file)
f.close()


# Test result
old = open('original_file.txt', 'r')
old.seek(0, 2)
old_size = old.tell()
new = open('compressed.txt', 'r')
new.seek(0, 2)
new_size = new.tell()
print(f"A t√∂m√∂r√≠t√©s m√©rt√©ke {round(((old_size - new_size) / old_size) * 100, 2)} %")